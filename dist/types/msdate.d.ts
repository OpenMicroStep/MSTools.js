export declare class MSDate {
    static readonly DaysFrom00000229To20010101: number;
    static readonly DaysFrom00010101To20010101: number;
    static readonly SecsFrom00010101To20010101: number;
    static readonly SecsFrom19700101To20010101: number;
    interval: number;
    constructor(year: number, month: number, day: number);
    constructor(year: number, month: number, day: number, hours: number, minutes: number, seconds: number);
    constructor(interval: number);
    constructor(date: Date);
    constructor(date: MSDate);
    constructor();
    static isLeapYear(y: number): boolean;
    static validDate(year: number, month: number, day: number): boolean;
    static validTime(hour: number, minute: number, second: number): boolean;
    static intervalFromYMD(year: number, month: number, day: number): number;
    static intervalFrom(year: number, month: number, day: number, hours: number, minutes: number, seconds: number): number;
    static timeFromInterval(t: number): number;
    static dayFromInterval(t: number): number;
    static secondsFromInterval(t: number): number;
    static minutesFromInterval(t: number): number;
    static hoursFromInterval(t: number): number;
    static dayOfWeekFromInterval(t: number, offset: number): number;
    static componentsWithInterval(interval: number): {
        day: number;
        hour: number;
        minute: number;
        seconds: number;
        dayOfWeek: number;
        month: number;
        year: number;
    };
    static _lastDayOfMonth(year: any, month: any): number;
    static _yearRef(y: any, offset: any): number;
    components(): {
        day: number;
        hour: number;
        minute: number;
        seconds: number;
        dayOfWeek: number;
        month: number;
        year: number;
    };
    isEqualTo(other: any): boolean;
    isLeap(): boolean;
    yearOfCommonEra(): number;
    monthOfYear(): number;
    weekOfYear(offset?: number): number;
    dayOfYear(): number;
    dayOfMonth(): number;
    lastDayOfMonth(): number;
    dayOfWeek(offset: any): number;
    hourOfDay(): number;
    secondOfDay(): number;
    minuteOfHour(): number;
    secondOfMinute(): number;
    dateWithoutTime(): MSDate;
    dateOfFirstDayOfYear(): MSDate;
    dateOfLastDayOfYear(): MSDate;
    dateOfFirstDayOfMonth(): MSDate;
    dateOfLastDayOfMonth(): MSDate;
    secondsSinceLocal1970(): number;
    secondsSinceLocal2001(): number;
    toDate(): Date;
    toISOString(): string;
    toString(): string;
    toJSON(): string;
}
